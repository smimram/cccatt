# Compact closed categories
#
#-# mode: compact closed
#-# dim: 1

include "symmetric"

coh eta {a : .} : 1 -> a * !a

coh eps {a : .} : !a * a -> 1

let seps {a : .} : a * !a -> 1 := co sym eps

# coh nn {a : .} : !!a -> a

# coh nn' {a : .} : a -> !!a

# coh nn-nn' {a : .} : co nn nn' = id {!!a}

# coh nn'-nn {a : .} : co nn' nn = id {a}

# coh zig-zag {a : .} : co5 tunitl' (te eta id) tassoc (te id eps) tunitr ={!!a -> a} nn

coh zig-zag {a : .} : co5 tunitl' (te eta id) tassoc (te id eps) tunitr = id {a}

coh zag-zig {a : .} : co5 tunitr' (te id eta) tassoc' (te eps id) tunitl = id {!a}

# Tests

ncoh bla {a : .} : a -> !a

coh op {a b : .} (f : a -> b) : !b -> !a

# The loop is non-trivial
ncoh loop {a : .} : co (eta {a}) (seps {a}) = id

# We don't expect this to be well-defined as a coherence, but this is derivable
ncoh trace {a : .} (f : a -> a) : 1 -> 1
let trace {a : .} (f : a -> a) := co3 eta (te f id) seps

ncoh trace {a b : .} (f : a -> b) (g : b -> a) : 1 -> 1

# The trace should not be trivial
ncoh trivial-trace {a : .} (f : a -> a) : trace f = id

#TODO: current pasting condition refuses this whereas it could be accepted
# coh ptrace {a b c : .} (f : a * c -> b * c) : a -> b

# We can also define partial trace
let ptrace  {a b c : .} (f : a * c -> b * c) := co5 (te id eta) tassoc' (te f id) tassoc (te id seps)