# Cartesian bicategories
#
# See for instance _A type theory for cartesian closed bicategories_ by Fiore and Saville
#
#-# mode: cartesian
#-# dimension: 2
#
# Note that this formalization cannot go through with our directed criterion, see bicategory-cartesian2 for an alternative axiomatization
#-# reversible: true

include "bicategory"

# tup
coh pa {a b c : .} (f : a -> b) (g : a -> c) : a -> b * c

# π
coh fst {a b : .} : a * b -> a

coh snd {a b : .} : a * b -> b

# ϖ
coh pa-fst {a b c : .} (f : a -> b) (g : a -> c) : co1 (pa f g) fst -> f

coh pa-snd {a b c : .} (f : a -> b) (g : a -> c) : co1 (pa f g) snd -> g

# p†
coh pa2 {a b c : .} {f : a -> b} {g : a -> c} (h : a -> b * c) (α : co1 h fst -> f) (β : co1 h snd -> g) : h -> pa f g

## Note that eta-expansion is derivable
# coh pa-eta {a b c : .} (f : a -> b * c) : f -> pa (co1 f fst) (co1 f snd)
# ς
let pa-eta {a b c : .} (f : a -> b * c) : f -> pa (co1 f fst) (co1 f snd) := pa2 f (id2 (co1 f fst)) (id2 (co1 f snd))

# U1
coh pa2-fst {a b c : .} {f : a -> b} {g : a -> c} (h : a -> b * c) (α : co1 h fst -> f) (β : co1 h snd -> g) : co2 (co21 (pa2 h α β) fst) (pa-fst f g) = α

coh pa2-snd {a b c : .} {f : a -> b} {g : a -> c} (h : a -> b * c) (α : co1 h fst -> f) (β : co1 h snd -> g) : co2 (co21 (pa2 h α β) snd) (pa-snd f g) = β

# U2
coh pa2-eta {a b c : .} {f : a -> b} {g : a -> c} {h : a -> b * c} (α : h -> pa f g) : α = pa2 h (co2 (co21 α fst) (pa-fst f g)) (co2 (co21 α snd) (pa-snd f g))

# cong
coh pa2-cong {a b c : .} {f : a -> b} {g : a -> c} {h : a -> b * c} {α α' : co1 h fst -> f} {β β' : co1 h snd -> g} (_ : α -> α') (_ : β -> β') : pa2 h α β = pa2 h α' β'

## Admissible rules

coh paf {a b c : .} {f f' : a -> b} {g g' : a -> c} (α : f -> f') (β : g -> g') : pa f g -> pa f' g'
let paf {a b c : .} {f f' : a -> b} {g g' : a -> c} (α : f -> f') (β : g -> g') : pa f g -> pa f' g' := pa2 {a} {b} {c} {f'} {g'} (pa f g) (co2 (pa-fst f g) α) (co2 (pa-snd f g) β)

# Lemmas to be moved
coh co21-cong {a b c : .} {f g : a -> b} {α β : f -> g} (_ : α -> β) (h  : b -> c) : co21 α h -> co21 β h
coh co2-cong {a b : .} {f g h : a -> b} {α α' : f -> g} {β β': g -> h} (_ : α -> α') (_ : β -> β') : co2 α β -> co2 α' β'
coh id3 {a b : .} {f g : a -> b} (α : f -> g) : α -> α
coh id-co1l {a b c : .} (f : a -> b) (g : b -> c) : id2 (co1 f g) -> co21 (id2 f) g
coh co2-co21 {a b c : .} {f g h : a -> b} (α : f -> g) (β : g -> h) (k : b -> c) : co21 (co2 α β) k -> co2 (co21 α k) (co21 β k)

# TODO: show that other are also derivable
coh paf-id2 {a b c : .} (f : a -> b) (g : a -> c) : paf (id2 f) (id2 g) -> id2 (pa f g)
let paf-id2 {a b c : .} (f : a -> b) (g : a -> c) : paf (id2 f) (id2 g) -> id2 (pa f g) :=
co3 (pa2-cong
        (co3 (unitr2 _) (co3 (inv3 (unitl2 _)) (co2-cong (id-co1l _ _) (id3 _))))
        (co3 (unitr2 _) (co3 (inv3 (unitl2 _)) (co2-cong (id-co1l _ _) (id3 _)))))
     (inv3 (pa2-eta (id2 _)))

coh paf-co2 {a b c : .} {f f' f'' : a -> b} {g g' g'' : a -> c} (α : f -> f') (α' : f' -> f'') (β : g -> g') (β' : g' -> g'') : paf (co2 α α') (co2 β β') = co2 (paf α β) (paf α' β')
let paf-co2 {a b c : .} {f f' f'' : a -> b} {g g' g'' : a -> c} (α : f -> f') (α' : f' -> f'') (β : g -> g') (β' : g' -> g'') : paf (co2 α α') (co2 β β') = co2 (paf α β) (paf α' β') :=
co3 (pa2-cong
        (co3 (co3 (co3 (co3 (co3 (inv3 (assoc2 _ _ _)) (co2-cong (inv3 (pa2-fst _ _ _)) (id3 _))) (assoc2 _ _ _)) (co2-cong (id3 _) (inv3 (pa2-fst _ _ _)))) (inv3 (assoc2 _ _ _))) (co2-cong (inv3 (co2-co21 _ _ _)) (id3 _)))
        (co3 (co3 (co3 (co3 (co3 (inv3 (assoc2 _ _ _)) (co2-cong (inv3 (pa2-snd _ _ _)) (id3 _))) (assoc2 _ _ _)) (co2-cong (id3 _) (inv3 (pa2-snd _ _ _)))) (inv3 (assoc2 _ _ _))) (co2-cong (inv3 (co2-co21 _ _ _)) (id3 _))))
    (inv3 (pa2-eta (co2 _ _)))

# ς-nat
coh pa-eta-nat {a b c : .} {f f' : a -> b * c} (α : f -> f') : co2 α (pa-eta f') = co2 (pa-eta f) (paf (co21 α fst) (co21 α snd))
let pa-eta-nat {a b c : .} {f f' : a -> b * c} (α : f -> f') : co2 α (pa-eta f') = co2 (pa-eta f) (paf (co21 α fst) (co21 α snd)) :=
  trans3
    (pa2-eta _)
    (pa2-cong
      (trans10
        (co2-cong (co2-co21 _ _ _) (id3 _))
        (assoc2 _ _ _)
        (co2-cong (id3 _) (pa2-fst _ _ _))
        (unitr2 _)
        (inv3 (unitl2 _))
        (co2-cong (inv3 (pa2-fst _ _ _)) (id3 _))
        (assoc2 _ _ _)
        (co2-cong (id3 _) (inv3 (pa2-fst _ _ _)))
        (inv3 (assoc2 _ _ _))
        (co2-cong (inv3 (co2-co21 _ _ _)) (id3 _))
      )
      (trans10
        (co2-cong (co2-co21 _ _ _) (id3 _))
        (assoc2 _ _ _)
        (co2-cong (id3 _) (pa2-snd _ _ _))
        (unitr2 _)
        (inv3 (unitl2 _))
        (co2-cong (inv3 (pa2-snd _ _ _)) (id3 _))
        (assoc2 _ _ _)
        (co2-cong (id3 _) (inv3 (pa2-snd _ _ _)))
        (inv3 (assoc2 _ _ _))
        (co2-cong (inv3 (co2-co21 _ _ _)) (id3 _))
      )
    )
    (inv3 (pa2-eta _))

# ϖ-nat
coh pa-fst-nat {a b c : .} {f f' : a -> b} {g g' : a -> c} (α : f -> f') (β : g -> g') : co2 (co21 (paf α β) fst) (pa-fst f' g') = co2 (pa-fst f g) α

coh pa-snd-nat {a b c : .} {f f' : a -> b} {g g' : a -> c} (α : f -> f') (β : g -> g') : co2 (co21 (paf α β) snd) (pa-snd f' g') = co2 (pa-snd f g) β

# triangle-law-1
coh tl1 {a b c : .} (f : a -> b) (g : a -> c) : co2 (pa-eta (pa f g)) (paf (pa-fst f g) (pa-snd f g)) = id2 _

# triangle-law-2
coh tl2-fst {a b c : .} (f : a -> b * c) : co2 (co21 (pa-eta f) fst) (pa-fst _ _) = id2 (co1 f fst)

coh tl2-snd {a b c : .} (f : a -> b * c) : co2 (co21 (pa-eta f) snd) (pa-snd _ _) = id2 (co1 f snd)
