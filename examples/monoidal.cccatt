#
# Monoidal categories
#
#-# mode: monoidal category
#-# dimension: 1

# Categories

coh id {a : .} : a -> a

coh co {a b c : .} (f : a -> b) (g : b -> c) : a -> c

let co3 {a b c d : .} (f : a -> b) (g : b -> c) (h : c -> d) := co f (co g h)

let co4 {a0 a1 a2 a3 a4 : .} (f1 : a0 -> a1) (f2 : a1 -> a2) (f3 : a2 -> a3) (f4 : a3 -> a4) := co f1 (co f2 (co f3 f4))

let co5 {a0 a1 a2 a3 a4 a5 : .} (f1 : a0 -> a1) (f2 : a1 -> a2) (f3 : a2 -> a3) (f4 : a3 -> a4) (f5 : a4 -> a5) := co f1 (co f2 (co f3 (co f4 f5)))

let co6 {a0 a1 a2 a3 a4 a5 a6 : .} (f1 : a0 -> a1) (f2 : a1 -> a2) (f3 : a2 -> a3) (f4 : a3 -> a4) (f5 : a4 -> a5) (f6 : a5 -> a6) := co f1 (co f2 (co f3 (co f4 (co f5 f6))))

coh unitl {a b : .} (f : a -> b) : co id f = f

coh unitr {a b : .} (f : a -> b) : co f id = f

coh assoc {a b c d : .} (f : a -> b) (g : b -> c) (h : c -> d) : co (co f g) h = co f (co g h)

# Monoidal categories

coh te {a a' b b' : .} (f : a -> a') (g : b -> b') : a * b -> a' * b'

coh tassoc {a b c : .} : (a * b) * c -> a * (b * c)

coh tassoc' {a b c : .} : a * (b * c) -> (a * b) * c

coh tunitl {a : .} : 1 * a -> a

coh tunitl' {a : .} : a -> 1 * a

coh tunitr {a : .} : a * 1 -> a

coh tunitr' {a : .} : a -> a * 1

## Invertibility

coh tunitl-tunitl' {a : .} : co tunitl tunitl' = id {1 * a}

coh tunitl'-tunitl {a : .} : co tunitl' tunitl = id {a}

coh tunitr-tunitr' {a : .} : co tunitr tunitr' = id {a * 1}

coh tunitr'-tunitr {a : .} : co tunitr' tunitr = id {a}

coh tassoc-tassoc' {a b c : .} : co tassoc tassoc' = id {(a * b) * c}

coh tassoc'-tassoc {a b c : .} : co tassoc' tassoc = id {a * (b * c)}

## Naturality

coh tunitl-nat {a b : .} (f : a -> b) : co (te id f) tunitl = co tunitl f

coh tunitr-nat {a b : .} (f : a -> b) : co (te f id) tunitr = co tunitr f

coh tassoc-nat {a a' b b' c c' : .} (f : a -> a') (g : b -> b') (h : c -> c') : co (te (te f g) h) tassoc = co tassoc (te f (te g h))

## Axioms

coh triangle {a b : .} : co tassoc (te id tunitl) ={ (a * 1) * b -> a * b } te tunitr id

coh pentagon {a b c d : .} : co3 (te tassoc id) tassoc (te id tassoc) ={ ((a * b) * c) * d -> a * (b * (c * d)) } co tassoc tassoc
