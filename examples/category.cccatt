#
# Plain categories
#
#-# mode: category
#-# dimension: 1

coh id {a : .} : a -> a

coh co {a b c : .} (f : a -> b) (g : b -> c) : a -> c

coh unitl {a b : .} (f : a -> b) : co id f = f

coh unitr {a b : .} (f : a -> b) : co f id = f

coh assoc {a b c d : .} (f : a -> b) (g : b -> c) (h : c -> d) : co (co f g) h = co f (co g h)

# Tests

coh co3 {a b c d : .} (f : a -> b) (g : b -> c) (h : c -> d) : a -> d

coh co3-coco {a b c d : .} (f : a -> b) (g : b -> c) (h : c -> d) : co3 f g h = co f (co g h)

let two {a : .} (f : a -> a) := co f f

coh co1 {a b : .} (f : a -> b) : a -> b

ncoh co1 {a b : .} (f : a -> b) (g : b -> a) : a -> b

ncoh co1 {a b c : .} (f : a -> b) (g : b -> c) : a -> b

# Equality

coh refl {a b : .} (f : a -> b) : f = f

coh sym {a b : .} {f g : a -> b} (_ : f = g) : g = f

coh trans {a b : .} {f g h : a -> b} (_ : f = g) (_ : g = h) : f = h

# Multiple compositions

let co3 {a b c d : .} (f : a -> b) (g : b -> c) (h : c -> d) := co f (co g h)

let co4 {a0 a1 a2 a3 a4 : .} (f1 : a0 -> a1) (f2 : a1 -> a2) (f3 : a2 -> a3) (f4 : a3 -> a4) := co f1 (co f2 (co f3 f4))

let co5 {a0 a1 a2 a3 a4 a5 : .} (f1 : a0 -> a1) (f2 : a1 -> a2) (f3 : a2 -> a3) (f4 : a3 -> a4) (f5 : a4 -> a5) := co f1 (co f2 (co f3 (co f4 f5)))

let co6 {a0 a1 a2 a3 a4 a5 a6 : .} (f1 : a0 -> a1) (f2 : a1 -> a2) (f3 : a2 -> a3) (f4 : a3 -> a4) (f5 : a4 -> a5) (f6 : a5 -> a6) := co f1 (co f2 (co f3 (co f4 (co f5 f6))))
