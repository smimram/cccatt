# Cartesian closed categories, equationally presented
# This is the version of Mori and Matsumoto in _Coherence for Cartesian Closed Categories: A Sequential Approach_
#
#-# mode: ccc

# Generators

coh comp {a b c : .} (f : a ⇒ b) (g : b ⇒ c) : a ⇒ c

coh id {a : .} : a ⇒ a

coh prod {a a' b b' : .} (f : a ⇒ a') (g : b ⇒ b') : a * b ⇒ a' * b'

coh exp {a a' b b' : .} (f : a ⇒ a') (g : b ⇒ b') : (a' ⇒ b) ⇒ (a ⇒ b')

coh dupl {a : .} : a ⇒ a * a

coh fst {a b : .} : a * b ⇒ a

coh snd {a b : .} : a * b ⇒ b

coh mark {a b : .} : a ⇒ b ⇒ a * b

coh app {a b : .} : (a ⇒ b) * a ⇒ b

coh kill {a : .} : a ⇒ 1

# Relations

## Categoricity

coh assoc {a b c d : .} (f : a ⇒ b) (g : b ⇒ c) (h : c ⇒ d) : comp (comp f g) h = comp f (comp g h)
coh unitl {a b : .} (f : a ⇒ b) : comp id f = f
coh unitr {a b : .} (f : a ⇒ b) : comp f id = f

## Functoriality

coh dist {a a' a'' b b' b'' : .} (f : a ⇒ a') (g : b ⇒ b') (h : a' ⇒ a'') (k : b' ⇒ b'') : comp (prod f g) (prod h k) = prod (comp f h) (comp g k)
coh prod-id {a b : .} : prod id id ={a * b ⇒ a * b} id
coh exp-comp {a b c d : .} (f : a ⇒ b) (g : b ⇒ c) : exp (id {d}) (comp f g) = comp (exp id f) (exp id g)
coh exp-id {a b : .} : exp id id ={(a ⇒ b) ⇒ (a ⇒ b)} id

## Naturality

coh comp-dupl {a b : .} (f : a ⇒ b) : comp f dupl = comp dupl (prod f f)
coh prod-fst {a a' b b' : . } (f : a ⇒ a') (g : b ⇒ b') : comp (prod f g) fst = comp fst f
coh prod-snd {a a' b b' : . } (f : a ⇒ a') (g : b ⇒ b') : comp (prod f g) snd = comp snd g
coh comp-mark {a b c : .} (f : a ⇒ b) : comp f mark ={a ⇒ c ⇒ b * c} comp mark (exp id (prod f id))
coh comp-app {a b c : .} (f : b ⇒ c) : comp (prod (exp id f) id) app ={(a ⇒ b) * a ⇒ c} comp app f
coh comp-kill {a b : .} (f : a ⇒ b) : comp f kill = kill

## Adjunctions

coh dupl-pair {a b : .} : comp dupl (prod fst snd) = id{a * b}
coh dupl-fst {a : .} : comp dupl fst ={a ⇒ a} id
coh dupl-snd {a : .} : comp dupl snd ={a ⇒ a} id
coh mark-app {a b : .} : comp (prod mark id) app = id{a * b}
coh mark-app' {a b : .} : comp mark (exp id app) = id{a ⇒ b}
coh kill-id : kill ={1 ⇒ 1} id

# Test

## TODO: the following should be accepted
# coh prod-eta {a b c : .} (f : a -> b * c) : comp dupl (prod (comp f fst) (comp f snd)) = f
