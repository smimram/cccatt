# Compact closed categories
#
#-# mode: compact closed
#-# dim: 1

include "symmetric"

coh eta {a : .} : 1 -> a * !a

coh eps {a : .} : !a * a -> 1

# coh nn {a : .} : !!a -> a

# coh nn' {a : .} : a -> !!a

# coh nn-nn' {a : .} : co nn nn' = id {!!a}

# coh nn'-nn {a : .} : co nn' nn = id {a}

# coh zig-zag {a : .} : co5 tunitl' (te eta id) tassoc (te id eps) tunitr ={!!a -> a} nn

coh zig-zag {a : .} : co5 tunitl' (te eta id) tassoc (te id eps) tunitr = id {a}

coh zag-zig {a : .} : co5 tunitr' (te id eta) tassoc' (te eps id) tunitl = id {!a}

# Tests

ncoh bla {a : .} : a -> !a

# coh op {a b : .} (f : a -> b) : b -> a

let trace {a : .} (f : a -> a) := co4 eta (te f id) sym eps

# TODO: we actually have a trivial form of compact closed category here...
coh trivial-trace {a : .} (f : a -> a) : trace f = id
